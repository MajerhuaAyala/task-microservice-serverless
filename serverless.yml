service: serverless-cognito-auth
provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage}
  environment:
    user_pool_id: { Ref: UserPool }
    client_id: { Ref: UserClient }
      #host_url:
      #Fn::GetAtt:
      #- MyDB
    #- Endpoint.Address
    host_url: test.cl0g4qs003x8.us-east-2.rds.amazonaws.com
    db_username: ${ssm:/username-mysql}
    db_password: ${ssm:/password-mysql}
    db_name: ${ssm:/databasename_mysql}
  role: arn:aws:iam::905418036958:role/deployAdministratorRole

layers:
  TaskLayer:
    name: ${self:service}-${self:provider.stage}-dependencies
    path: layers
    description: "Node modules for  task"
    compatibleRuntimes:
      - nodejs20.x
    package:
      exclude:
        - "!nodejs/node_modules/**"

package:
  exclude:
    - scripts/**
    - node_modules/**
    - layers/**
    - package.json
    - package-lock.json
    - "*.md"
    - "env.*"
    - scannerwork/
    - sonar-project.properties
  individually: true

functions:
  loginUser:
    handler: user/login.handler
    layers:
      - { Ref: TaskLayerLambdaLayer }
    events:
      - http:
          path: user/login
          method: post
          cors: true

  signupUser:
    handler: user/signup.handler
    layers:
      - { Ref: TaskLayerLambdaLayer }
    events:
      - http:
          path: user/signup
          method: post
          cors: true

  getTask:
    handler: task/getTask.handler
    layers:
      - { Ref: TaskLayerLambdaLayer }
    events:
      - http:
          path: task/{id}
          method: get
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email

  createTask:
    handler: task/createTask.handler
    layers:
      - { Ref: TaskLayerLambdaLayer }
    events:
      - http:
          path: task
          method: post
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email

  updateTask:
    handler: task/updateTask.handler
    layers:
      - { Ref: TaskLayerLambdaLayer }
    events:
      - http:
          path: task/{id}
          method: put
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email

  snsEmailHandler:
    handler: task/updateTaskSenderEmail.handler
    events:
      - sns:
          arn: !Ref MySNSTopic
          topicName: updateTask

resources:
  Resources:
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: serverless-auth-pool
        Schema:
          - Name: email
            Required: true
            Mutable: true
        Policies:
          PasswordPolicy:
            MinimumLength: 6
        AutoVerifiedAttributes: [ "email" ]

    UserClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: user-pool-ui
        GenerateSecret: false
        UserPoolId: { Ref: UserPool }
        AccessTokenValidity: 5
        IdTokenValidity: 5
        ExplicitAuthFlows:
          - "ADMIN_NO_SRP_AUTH"
    MyDB:
      Type: AWS::RDS::DBInstance
      Properties:
        DBInstanceIdentifier: test
        AllocatedStorage: 20
        DBInstanceClass: db.t3.micro
        Engine: mysql
        MasterUsername: ${self:provider.environment.db_username}
        MasterUserPassword: ${self:provider.environment.db_password}
        PubliclyAccessible: true
        DBName: ${self:provider.environment.db_name}
        VPCSecurityGroups:
          - Fn::GetAtt: [ MySecurityGroup, GroupId ]
        DBSubnetGroupName:
          Ref: MyDBSubnetGroup

    MySecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Enable access to RDS instance
        VpcId: vpc-080dc6ccaa6d7f855
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 3306
            ToPort: 3306
            CidrIp: 0.0.0.0/0

    MyDBSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties:
        DBSubnetGroupDescription: Subnet group for RDS instance
        SubnetIds:
          - subnet-06a1a5907172686fc
          - subnet-0c7ca196b20cf73ba
          - subnet-0c9bf069930fc4930

    MySNSTopic:
      Type: "AWS::SNS::Topic"
      Properties:
        TopicName: "updateTask"


plugins:
  - serverless-offline
